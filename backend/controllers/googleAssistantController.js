// controllers/googleAssistantController.js - Google Assistant Webhook Controller
const Device = require('../models/Device');
const MqttService = require('../services/mqttService');

class GoogleAssistantController {
  
  static async handleWebhook(req, res) {
    try {
      console.log('üìû Google Assistant Request:', JSON.stringify(req.body, null, 2));
      
      const { queryResult } = req.body;
      
      if (!queryResult || !queryResult.intent) {
        return res.status(400).json({
          fulfillmentText: 'Invalid request format',
          source: 'smart-home-backend'
        });
      }
      
      const intent = queryResult.intent.displayName;
      const parameters = queryResult.parameters || {};
      
      console.log('üéØ Intent:', intent);
      console.log('üìã Parameters:', parameters);
      
      let responseText = '';
      let success = false;
      
      switch (intent) {
        case 'TurnOnLED':
        case 'BatDen':
          await MqttService.publishLED('on');
          await Device.updateState('LED', 'on');
          responseText = 'ƒê√£ b·∫≠t ƒë√®n LED';
          success = true;
          break;
          
        case 'TurnOffLED':
        case 'TatDen':
          await MqttService.publishLED('off');
          await Device.updateState('LED', 'off');
          responseText = 'ƒê√£ t·∫Øt ƒë√®n LED';
          success = true;
          break;
          
        case 'TurnOnFan':
        case 'BatQuat':
          const fanSpeedOn = parameters.speed ? parseInt(parameters.speed) : 255;
          await MqttService.publishFan('on', fanSpeedOn);
          await Device.updateState('Fan', 'on', fanSpeedOn);
          responseText = fanSpeedOn === 255 
            ? 'ƒê√£ b·∫≠t qu·∫°t ·ªü t·ªëc ƒë·ªô t·ªëi ƒëa' 
            : `ƒê√£ b·∫≠t qu·∫°t ·ªü t·ªëc ƒë·ªô ${fanSpeedOn}`;
          success = true;
          break;
          
        case 'TurnOffFan':
        case 'TatQuat':
          await MqttService.publishFan('off', 0);
          await Device.updateState('Fan', 'off', 0);
          responseText = 'ƒê√£ t·∫Øt qu·∫°t';
          success = true;
          break;
          
        case 'SetFanSpeed':
        case 'DatTocDoQuat':
          const speedValue = parseInt(parameters.speed) || 128;
          const normalizedSpeed = Math.min(255, Math.max(0, speedValue));
          await MqttService.publishFan('on', normalizedSpeed);
          await Device.updateState('Fan', 'on', normalizedSpeed);
          responseText = `ƒê√£ ƒë·∫∑t t·ªëc ƒë·ªô qu·∫°t l√† ${normalizedSpeed}`;
          success = true;
          break;
          
        case 'GetDeviceStatus':
        case 'KiemTraThietBi':
          const deviceName = parameters.device || parameters['device-name'];
          if (!deviceName) {
            responseText = 'B·∫°n mu·ªën ki·ªÉm tra thi·∫øt b·ªã n√†o? ƒê√®n hay qu·∫°t?';
          } else {
            const device = await Device.getByName(deviceName);
            if (device) {
              const status = device.state === 'on' ? 'ƒëang b·∫≠t' : 'ƒëang t·∫Øt';
              responseText = device.type === 'fan' && device.state === 'on'
                ? `${device.name} ${status} ·ªü t·ªëc ƒë·ªô ${device.speed || 0}`
                : `${device.name} ${status}`;
            } else {
              responseText = `Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã ${deviceName}`;
            }
          }
          success = true;
          break;
          
        case 'GetAllDevices':
        case 'TatCaThietBi':
          const allDevices = await Device.getAll();
          if (allDevices.length > 0) {
            const statuses = allDevices.map(d => {
              const status = d.state === 'on' ? 'b·∫≠t' : 't·∫Øt';
              return d.type === 'fan' && d.state === 'on'
                ? `${d.name} ƒëang ${status} ·ªü t·ªëc ƒë·ªô ${d.speed || 0}`
                : `${d.name} ƒëang ${status}`;
            });
            responseText = 'Tr·∫°ng th√°i c√°c thi·∫øt b·ªã: ' + statuses.join(', ');
          } else {
            responseText = 'Kh√¥ng c√≥ thi·∫øt b·ªã n√†o';
          }
          success = true;
          break;
          
        case 'TurnOnAll':
        case 'BatTatCa':
          await MqttService.publishAll('on');
          await Device.updateAll('on');
          responseText = 'ƒê√£ b·∫≠t t·∫•t c·∫£ thi·∫øt b·ªã';
          success = true;
          break;
          
        case 'TurnOffAll':
        case 'TatTatCa':
          await MqttService.publishAll('off');
          await Device.updateAll('off');
          responseText = 'ƒê√£ t·∫Øt t·∫•t c·∫£ thi·∫øt b·ªã';
          success = true;
          break;
          
        default:
          responseText = 'Xin l·ªói, t√¥i ch∆∞a hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ n√≥i "b·∫≠t ƒë√®n", "t·∫Øt qu·∫°t", ho·∫∑c "ki·ªÉm tra thi·∫øt b·ªã"';
      }
      
      console.log(`‚úÖ Response: ${responseText}`);
      
      res.json({
        fulfillmentText: responseText,
        fulfillmentMessages: [{
          text: {
            text: [responseText]
          }
        }],
        source: 'smart-home-backend',
        payload: {
          success,
          intent,
          timestamp: new Date().toISOString()
        }
      });
      
    } catch (error) {
      console.error('‚ùå Error handling Google Assistant request:', error);
      res.status(500).json({
        fulfillmentText: 'ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i.',
        source: 'smart-home-backend',
        payload: {
          error: error.message
        }
      });
    }
  }
}

module.exports = GoogleAssistantController;
